# -*- coding: utf-8 -*-
"""soil health analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zb7KULBz_i3DJfusiINx2xY3dPJeaiQk
"""

import pandas as pd

df = pd.read_csv('plant_health_data.csv', delimiter=',')
pd.set_option('display.width', 1000)
pd.set_option('display.max_columns', None)  # Show all columns
print(df.head())



print(df.isnull().sum)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder

df = pd.read_csv("plant_health_data.csv")

df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['Hour'] = df['Timestamp'].dt.hour
df['Day'] = df['Timestamp'].dt.day
df['Month'] = df['Timestamp'].dt.month
df.drop(columns=['Timestamp'], inplace=True)

print(df.head())


label_encoder = LabelEncoder()
df['Plant_Health_Status'] = label_encoder.fit_transform(df['Plant_Health_Status'])


X = df.drop(columns=['Plant_Health_Status'])  # Features
y = df['Plant_Health_Status']  # Target


scaler = MinMaxScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training Data Shape:", X_train.shape)
print("Testing Data Shape:", X_test.shape)

from sklearn.ensemble import RandomForestClassifier


model = RandomForestClassifier(n_estimators=100, random_state=42)


model.fit(X_train, y_train)

print("Model Training Complete! âœ…")

from sklearn.metrics import accuracy_score, classification_report


y_pred = model.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)


print("Model Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))

print("Number of features used in training:", X_train.shape[1])

import numpy as np

new_data = pd.DataFrame(np.array([[0.3, 0.5, 0.6, 0.4, 0.2, 0.7, 0.5, 0.6, 0.9, 0.1, 0.3, 0.7, 0.2, 0.4, 0.8]]),
                        columns=X.columns)

predicted_status = model.predict(new_data)

predicted_label = label_encoder.inverse_transform(predicted_status)

print("Predicted Soil Health Status:", predicted_label[0])